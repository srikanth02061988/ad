import streamlit as st
import pdfplumber
from langchain.text_splitter import RecursiveCharacterTextSplitter
import psycopg2
from psycopg2.extras import execute_values
import numpy as np
import logging
import requests
import json
import uuid
from openai import AzureOpenAI

client = AzureOpenAI(
    api_version="2024-02-01",
    azure_endpoint="https://effopenai.openai.azure.com/",
    api_key="7896c56d537df41980034ac85b9d9bc9"
)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

azure_endpoint = "https://effopenai.openai.azure.com"
azure_api_key = "7896c56d537df41980034ac85b9d9bc9"
embedding_deployment = "TEB-Robin"
completion_deployment = "ajitTest"

headers = {
    "Content-Type": "application/json",
    "api-key": azure_api_key
}

def get_embeddings(text, endpoint, headers, deployment=embedding_deployment):
    try:
        url = f"{endpoint.strip()}/openai/deployments/{deployment}/embeddings?api-version=2024-02-15-preview"
        data = {"input": text}
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        embedding = result['data'][0]['embedding']
        return embedding
    except requests.exceptions.RequestException as e:
        st.error(f"An error occurred while generating embeddings: {e}")
        return None

def get_pdf_text(pdf_docs):
    text = ""
    try:
        with pdfplumber.open(pdf_docs) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    cleaned_text = page_text.replace('\x00', '')
                    text += cleaned_text
    except Exception as e:
        st.error(f"An error occurred while extracting text from PDF: {e}")
    return text

def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=5000, chunk_overlap=500)
    chunks = text_splitter.split_text(text)
    return chunks

def store_embeddings_in_db(pdf_id, text_chunks, endpoint, headers):
    try:
        conn = psycopg2.connect(
            host="your_host",
            port="5432",
            database="your_database",
            user="your_user",
            password="your_password"
        )
        with conn.cursor() as cur:
            cur.execute("""
            CREATE TABLE IF NOT EXISTS embeddings (
                id BIGSERIAL PRIMARY KEY,
                pdf_id UUID,
                content TEXT,
                embedding VECTOR(1536)
            )
            """)
            conn.commit()

        embeddings = []
        for chunk in text_chunks:
            embedding = get_embeddings(chunk, endpoint, headers)
            if embedding is not None:
                embedding_vector = np.array(embedding, dtype=np.float32)
                embeddings.append((pdf_id, chunk, embedding_vector.tolist()))

        if embeddings:
            with conn.cursor() as cur:
                execute_values(cur, "INSERT INTO embeddings (pdf_id, content, embedding) VALUES %s", embeddings)
                conn.commit()
        conn.close()
    except Exception as e:
        st.error(f"An error occurred while storing embeddings in the database: {e}")

def retrieve_embeddings_from_db(pdf_id):
    try:
        conn = psycopg2.connect(
            host="your_host",
            port="5432",
            database="your_database",
            user="your_user",
            password="your_password"
        )
        with conn.cursor() as cur:
            cur.execute("SELECT content, embedding::text FROM embeddings WHERE pdf_id = %s", (pdf_id,))
            rows = cur.fetchall()
        conn.close()

        if rows:
            docs = [row[0] for row in rows]
            embeddings = np.array([np.fromstring(row[1][1:-1], sep=',') for row in rows], dtype=np.float32)
            return docs, embeddings
        else:
            return None, None
    except Exception as e:
        st.error(f"An error occurred while retrieving embeddings from the database: {e}")
        return None, None

def find_relevant_chunks(question, docs, embeddings, top_k=5):
    return docs[:top_k]

def generate_responses(question, relevant_docs, client, deployment="ajitTest"):
    try:
        combined_docs = "\n\n".join(relevant_docs)
        prompt = f"Based on the following documents, answer the question: {question}\n\nDocuments:\n\n{combined_docs}"

        response = client.chat.completions.create(
            model=deployment,
            messages=[
                {"role": "system", "content": "Assistant is a large language model trained by OpenAI."},
                {"role": "user", "content": prompt}
            ]
        )

        result = response.model_dump_json(indent=2)
        text_response = response.choices[0].message.content.strip()
        return text_response
    except Exception as e:
        st.error(f"An error occurred while generating responses: {e}")
        return None

def main():
    st.set_page_config(page_title="Digital Marketing")
    
    # Header and Footer
    st.markdown("""
        <style>
        .header, .footer {
            width: 100%;
            text-align: center;
            padding: 10px;
        }
        .header {
            background-color: #f8f9fa;
        }
        .footer {
            background-color: #f1f1f1;
            position: fixed;
            bottom: 0;
            width: 100%;
        }
        </style>
        <div class="header">
            <img src="https://example.com/logo.png" alt="Logo" style="width:150px;">
        </div>
    """, unsafe_allow_html=True)

    st.header("Generate Derivative Content")
    st.sidebar.title("Menu")

    tab1, tab2 = st.tabs(["Upload & Generate", "Ask Questions"])

    with tab1:
        pdf_docs = st.sidebar.file_uploader("Upload your PDF Files", type=["pdf"])

        if pdf_docs is not None and st.sidebar.button("Submit PDF"):
            with st.spinner("Processing..."):
                raw_text = get_pdf_text(pdf_docs)
                if raw_text:
                    text_chunks = get_text_chunks(raw_text)
                    pdf_id = str(uuid.uuid4())
                    store_embeddings_in_db(pdf_id, text_chunks, azure_endpoint, headers)
                    st.session_state["pdf_id"] = pdf_id
                    st.session_state["text_chunks"] = text_chunks
                    st.session_state["category"] = None
                    st.sidebar.success("PDF processed and embeddings stored.")

        if "pdf_id" in st.session_state:
            category = st.selectbox("Select the category to search within:", ["Twitter", "LinkedIn", "Other"])
            if st.button("Submit"):
                with open("prompts.json", "r") as file:
                    prompts = json.load(file)
                system_prompt = prompts.get(category, "Default prompt")
                text_chunks = st.session_state.get("text_chunks", [])
                text_response = generate_responses(system_prompt, text_chunks, client)
                if text_response:
                    st.write("Response:")
                    st.write(text_response)
                    st.download_button("Download Response", data=text_response, file_name="response.txt")
                else:
                    st.error("Failed to generate responses.")
            if st.button("Next"):
                st.session_state["category"] = category
                st.experimental_rerun()

    with tab2:
        if "pdf_id" in st.session_state:
            category = st.session_state.get("category", "Other")
            user_question = st.text_area("Ask a Question based on the uploaded PDF", height=200)
            if st.button("Submit Question"):
                with st.spinner("Retrieving and processing..."):
                    pdf_id = st.session_state["pdf_id"]
                    docs, embeddings = retrieve_embeddings_from_db(pdf_id)
                    if docs and embeddings is not None and embeddings.any():
                        relevant_docs = find_relevant_chunks(user_question, docs, embeddings)
                        text_response = generate_responses(user_question, relevant_docs, client)
                        if text_response:
                            st.write("Response:")
                            st.write(text_response)
                            st.download_button("Download Response", data=text_response, file_name="response.txt")
                        else:
                            st.error("Failed to generate responses.")
                    else:
                        st.error("No relevant embeddings found for the uploaded PDF.")
        else:
            st.warning("Please upload and process a PDF in the 'Upload & Generate' tab first.")

    st.markdown("""
        <div class="footer">
            <img src="https://example.com/copyright.png" alt="Copyright" style="width:100px;">
        </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
