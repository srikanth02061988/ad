import static org.mockito.Mockito.*;
import org.mockito.*;
import org.junit.jupiter.api.*;
import java.net.http.HttpResponse;
import java.net.http.HttpClient;

class BlobStorageTriggerFunctionTest {

    @BeforeEach
    void setUp() {
        try (MockedStatic<DatabricksUtil> mockedStatic = Mockito.mockStatic(DatabricksUtil.class)) {
            // Prepare the HttpClient and Response mocks
            HttpClient client = mock(HttpClient.class);
            HttpResponse<String> response = mock(HttpResponse.class);
            when(response.body()).thenReturn("{\"run_id\": \"12345\"}");
            when(response.statusCode()).thenReturn(200);
            when(client.send(any(HttpRequest.class), any(HttpResponse.BodyHandler.class)))
                .thenReturn(response);

            // Mock static methods
            mockedStatic.when(() -> DatabricksUtil.createPostRequest(any(URI.class), any(JSONObject.class)))
                .thenReturn(mock(HttpRequest.class));
            mockedStatic.when(() -> DatabricksUtil.getHttpClient(anyBoolean()))
                .thenReturn(client);
        }
    }

    @Test
    void testTriggerDBJob() throws Exception {
        BlobStorageTriggerFunction function = new BlobStorageTriggerFunction();
        String result = function.triggerDBJob(new HashMap<>(), new JSONObject());
        Assertions.assertEquals("12345", result);
    }
}
