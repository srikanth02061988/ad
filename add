import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import openai
import psycopg2
from psycopg2.extras import execute_values
import numpy as np
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Set up Azure OpenAI credentials
openai.api_type = "azure"
openai.api_base = ""
openai.api_version = "2024-05-14"
openai.api_key = "7896c56d537d4f19803a4ac85b9d9bc9"

# Create an OpenAI client
client = openai.Client(api_key="7896c56d537d4f19803a4ac85b9d9bc9", timeout=120)

def get_embeddings(text, client, deployment="text-embedding-ada-002"):
    try:
        logger.info("Generating embeddings for the text chunk")
        response = client.embeddings.create(
            input=[text],
            model=deployment
        )
        embedding = response['data'][0]['embedding']
        logger.info("Embeddings generated successfully")
        return embedding
    except openai.error.OpenAIError as e:
        logger.error(f"Error generating embeddings: {e}")
        st.error(f"An error occurred while generating embeddings: {e}")
        return None

def get_pdf_text(pdf_docs):
    text = ""
    try:
        logger.info("Extracting text from PDF")
        reader = PdfReader(pdf_docs)
        for page in reader.pages:
            text += page.extract_text()
        logger.info("Text extraction from PDF successful")
    except Exception as e:
        logger.error(f"Error extracting text from PDF: {e}")
        st.error(f"An error occurred while extracting text from PDF: {e}")
    return text

def get_text_chunks(text):
    logger.info("Splitting text into chunks")
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=5000, chunk_overlap=500)
    chunks = text_splitter.split_text(text)
    logger.info(f"Text split into {len(chunks)} chunks")
    return chunks

def store_embeddings_in_db(text_chunks, category, client):
    try:
        logger.info("Connecting to PostgreSQL database")
        conn = psycopg2.connect(
            host="npeceffpsql.postgres.database.azure.com",
            port="5432",
            database="Digital_marketing_Embeddings",
            user="pgadmin",
            password="npeceffR8S"
        )

        with conn.cursor() as cur:
            logger.info("Creating table if it does not exist")
            cur.execute("""
            CREATE TABLE IF NOT EXISTS embeddings (
                id BIGSERIAL PRIMARY KEY,
                category TEXT,
                content TEXT,
                embedding BYTEA
            );
            """)
            conn.commit()

        embeddings = []
        for chunk in text_chunks:
            embedding = get_embeddings(chunk, client)
            if embedding is not None:
                embeddings.append((category, chunk, np.array(embedding).tobytes()))

        with conn.cursor() as cur:
            logger.info("Inserting embeddings into the database")
            execute_values(cur, "INSERT INTO embeddings (category, content, embedding) VALUES %s", embeddings)
            conn.commit()
        conn.close()
        logger.info("Embeddings stored in the database successfully")
    except Exception as e:
        logger.error(f"Error storing embeddings in database: {e}")
        st.error(f"An error occurred while storing embeddings in the database: {e}")

def main():
    st.set_page_config(page_title="Digital Marketing")
    st.header("Generate Derivative Content")

    st.sidebar.title("Menu:")
    pdf_category = st.sidebar.selectbox(
        "Select the category for the PDF:",
        ("Twitter", "LinkedIn", "Other")
    )

    pdf_docs = st.sidebar.file_uploader("Upload your PDF Files and Click on the submit and process", type=["pdf"])
    if st.sidebar.button("Submit & Process"):
        if pdf_docs is not None:
            with st.spinner("Processing..."):
                raw_text = get_pdf_text(pdf_docs)
                if raw_text:
                    text_chunks = get_text_chunks(raw_text)
                    store_embeddings_in_db(text_chunks, pdf_category, client)
                else:
                    logger.error("No text extracted from PDF")
                    st.error("Failed to extract text from the uploaded PDF.")
            st.sidebar.success("Done")

if __name__ == "__main__":
    main()
