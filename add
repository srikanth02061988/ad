import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;

class DatabricksUtilTest {

    @Test
    void testCreatePostRequest() throws Exception {
        // Mock the static methods of DatabricksUtil
        try (MockedStatic<DatabricksUtil> mockedDatabricksUtil = Mockito.mockStatic(DatabricksUtil.class)) {
            // Setup your HttpClient mock
            HttpClient mockHttpClient = Mockito.mock(HttpClient.class);
            HttpResponse<String> mockResponse = Mockito.mock(HttpResponse.class);

            Mockito.when(mockHttpClient.send(any(HttpRequest.class), any(HttpResponse.BodyHandler.class)))
                    .thenReturn(mockResponse);

            // Mocking static method calls
            mockedDatabricksUtil.when(DatabricksUtil::getHttpClient)
                    .thenReturn(mockHttpClient);

            // Assume this is your expected URI
            URI expectedUri = new URI("http://example.com/api/2.0/jobs/create");

            // Mock the method we are testing
            mockedDatabricksUtil.when(() -> DatabricksUtil.createJobCreateURI())
                    .thenReturn(expectedUri);

            // Call the method under test
            URI actualUri = DatabricksUtil.createJobCreateURI();

            // Assert the result
            assertEquals(expectedUri, actualUri);
        }
    }
}
