import os
from faker import Faker
import json
import random
import datetime

fake = Faker()

# Function to generate trace with attributes
def generate_trace(attribute, traceId):
    if attribute in ("input", "output"):
        value = {
            "endpoint": "complete",
            "modelName": "openai.turbo3.6",
            "prompt": fake.sentence(nb_words=6)
        }
    else:
        value = fake.random_int(min=1, max=100)
    
    metaInfo = {
        "modelName": "azure-openai.gpt-3-5-turbo"
    }
    
    if attribute in ("jailbreakAttempt", "guardRailAttempt"):
        metaInfo["prompt"] = fake.sentence(nb_words=6)
    
    trace = {
        "traceId": traceId,
        "attribute": attribute,
        "value": value,
        "metaInfo": metaInfo
    }
    
    return trace

# Function to generate a session with all traces
def generate_session(clientId, userId):
    traceTime = datetime.datetime.utcnow().isoformat() + "Z"
    traceTimeEpochNS = int(fake.unix_time() * 10**9)
    sessionId = fake.uuid4()
    
    # Common IDs and times for all traces in a session
    base_trace = {
        "traceTime": traceTime,
        "traceTimeEpochNS": traceTimeEpochNS,
        "clientId": clientId,
        "userId": userId,
        "sessionId": sessionId,
        "appCode": "TXT",
        "specVersion": "1.0.0",
        "logMessage": "None"
    }
    
    # Generate traces in a logical sequence
    traceId = fake.uuid4()
    traces = []
    traces.append(generate_trace("input", traceId))
    
    # Determine if there is a jailbreak or guardrail attempt
    jailbreakAttempt = random.choice([0, 1])
    guardRailAttempt = random.choice([0, 1])
    
    # Add jailbreak and guardrail attempts if they occur
    if jailbreakAttempt:
        traces.append(generate_trace("jailbreakAttempt", traceId))
    if guardRailAttempt:
        traces.append(generate_trace("guardRailAttempt", traceId))
    
    # Only generate output, modelLatency, and modelTokenCount if no jailbreak or guardrail
    if not jailbreakAttempt and not guardRailAttempt:
        traces.append(generate_trace("output", traceId))
        traces.append(generate_trace("modelLatency", traceId))
        traces.append(generate_trace("modelTokenCount", traceId))
    
    # Create the full session data by combining the common attributes with each trace
    session_data = []
    for trace in traces:
        session = base_trace.copy()
        session["traceType"] = "trace" if trace["attribute"] in ("input", "output") else "metric"
        session["trace"] = trace
        session_data.append(session)
    
    return session_data

# Function to generate multiple sessions
def generate_multiple_sessions(num_sessions, reuse_clients=True):
    clients = {}
    synthetic_data = []
    
    for _ in range(num_sessions):
        if reuse_clients and random.random() > 0.5 and clients:
            clientId, userId = random.choice(list(clients.items()))
        else:
            clientId = fake.uuid4()
            userId = fake.bothify(text="??-####-???")
            clients[clientId] = userId
        
        synthetic_data.extend(generate_session(clientId, userId))
    
    return synthetic_data

# Generate synthetic data covering all scenarios
synthetic_data = generate_multiple_sessions(50, reuse_clients=True)

# Save to JSON file
output_file_path = os.path.expanduser('~/synthetic_data.json')
with open(output_file_path, 'w') as f:
    json.dump(synthetic_data, f, indent=2)

print(f"Synthetic data has been generated and saved to '{output_file_path}'")

