import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junitpioneer.jupiter.SetEnvironmentVariable;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BlobStorageTriggerFunctionTest {

    @Mock
    private ExecutionContext context;
    @Mock
    private Logger logger;
    @Mock
    private PGDbConnection dbConnection;
    @Mock
    private Connection sqlConnection;
    @Mock
    private PreparedStatement preparedStatement;
    @Mock
    private ResultSet resultSet;

    // Assuming BlobStorageTriggerFunction accepts PGDbConnection as a dependency
    private BlobStorageTriggerFunction function = new BlobStorageTriggerFunction(dbConnection);

    @Test
    @SetEnvironmentVariable(key = "AZURE_STORAGE_CONNECTION_STRING", value = "DefaultEndpointsProtocol=https;AccountName=example;AccountKey=exampleKey;EndpointSuffix=core.windows.net")
    void testDatabaseQueryExecution() throws Exception {
        // Arrange: Set up your mocks and other pre-test actions
        when(context.getLogger()).thenReturn(logger);
        when(dbConnection.getConnection()).thenReturn(sqlConnection);
        when(sqlConnection.prepareStatement(anyString())).thenReturn(preparedStatement);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        when(resultSet.next()).thenReturn(true); // Mock a single result
        when(resultSet.getString("metadata")).thenReturn("metadata_value");

        // Act: Call the function or method you are testing
        function.run("Blob content", "exampleBlob.txt", context);

        // Assert: Check the results of the action
        verify(preparedStatement).executeQuery(); // Verify that a query was executed
        verify(logger).info(contains("metadata_value")); // Verify that the logger was called with the metadata
    }
}
