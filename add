import org.junit.jupiter.api.*;
import org.mockito.*;
import static org.mockito.Mockito.*;
import java.net.http.HttpResponse;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.URI;
import org.json.JSONObject;

class BlobStorageTriggerFunctionTest {

    @Test
    void testTriggerDBJob() throws Exception {
        // Arrange
        try (MockedStatic<DatabricksUtil> mockedDatabricksUtil = Mockito.mockStatic(DatabricksUtil.class)) {
            HttpClient mockedHttpClient = mock(HttpClient.class);
            HttpResponse<String> mockedResponse = mock(HttpResponse.class);

            // Setup the mocked response
            when(mockedResponse.body()).thenReturn("{\"run_id\": \"12345\"}");
            when(mockedResponse.statusCode()).thenReturn(200);

            // Mock the HttpClient to return our mocked response
            when(mockedHttpClient.send(any(HttpRequest.class), any(HttpResponse.BodyHandler.class)))
                .thenReturn(mockedResponse);

            // Mock the static methods used in the triggerDBJob
            mockedDatabricksUtil.when(() -> DatabricksUtil.getHttpClient(false))
                .thenReturn(mockedHttpClient);

            mockedDatabricksUtil.when(() -> DatabricksUtil.createPostRequest(any(URI.class), any(JSONObject.class)))
                .thenReturn(HttpRequest.newBuilder().uri(URI.create("http://example.com")).build());

            BlobStorageTriggerFunction function = new BlobStorageTriggerFunction();

            // Act
            String result = function.triggerDBJob(new HashMap<>(), new JSONObject());

            // Assert
            Assertions.assertEquals("12345", result);
        }
    }
}
