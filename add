import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os
from azure.identity import DefaultAzureCredential, get_token_provider
import openai
from langchain.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
import asyncio

asyncio.set_event_loop(asyncio.new_event_loop())

# Set up Azure OpenAI credentials
openai.api_type = "azure"
openai.api_base = os.getenv("AZURE_OPENAI_ENDPOINT")
openai.api_version = "2022-12-01"
openai.api_key = os.getenv("AZURE_OPENAI_API_KEY")

# Example function for embedding
def get_embedding(text):
    response = openai.Embedding.create(
        input=text,
        engine="text-embedding-ada-002"  # Update with the correct engine name
    )
    return response['data'][0]['embedding']

def get_pdf_text(pdf_docs):
    text = ""
    reader = PdfReader(pdf_docs)
    for page in reader.pages:
        text += page.extract_text()
    return text

def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
    chunks = text_splitter.split_text(text)
    return chunks

def get_vector_store(text_chunks):
    embeddings = [get_embedding(chunk) for chunk in text_chunks]
    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")
    return vector_store

def get_conversational_chain(platform):
    if platform == "Twitter":
        prompt_template = """
        Answer the question as detailed as possible from the provided context in a concise manner suitable for a Twitter post. Ensure the response does not exceed 280 characters. If the answer is not in provided context just say, "answer is not available in the context".
        Context: \n{context}\n
        Question: \n{question}\n
        Answer:
        """
    elif platform == "LinkedIn":
        prompt_template = """
        Answer the question as detailed as possible from the provided context in a professional manner suitable for a LinkedIn post. Ensure the response is within 1,300 to 2,000 characters. If the answer is not in provided context just say, "answer is not available in the context".
        Context: \n{context}\n
        Question: \n{question}\n
        Answer:
        """
    else:
        prompt_template = """
        Answer the question as detailed as possible from the provided context. If the answer is not in provided context just say, "answer is not available in the context".
        Context: \n{context}\n
        Question: \n{question}\n
        Answer:
        """

    model = openai.Completion.create  # Using Azure OpenAI for completion
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    chain = load_qa_chain(model, chain_type="stuff", prompt=prompt)
    return chain

def user_input(user_question, platform):
    new_db = FAISS.load_local("faiss_index")
    docs = new_db.similarity_search(user_question)
    chain = get_conversational_chain(platform)
    response = chain({'input_documents': docs, 'question': user_question}, return_only_outputs=True)
    print(response)
    st.write("Reply: ", response["output_text"])

def main():
    st.set_page_config("Digital Marketing")
    st.header("Generate Derivative Content")
    
    platform = st.selectbox(
        "Select the platform for the output:",
        ("Twitter", "LinkedIn", "Other")
    )
    
    user_question = st.text_input("Ask a Question from the PDF Files")
    
    if user_question:
        user_input(user_question, platform)
        
    with st.sidebar:
        st.title("Menu:")
        pdf_docs = st.file_uploader("Upload your PDF Files and Click on the submit and process")
        if st.button("Submit & Process"):
            with st.spinner("Processing..."):
                raw_text = get_pdf_text(pdf_docs)
                textchunks = get_text_chunks(raw_text)
                get_vector_store(textchunks)
                st.success("Done")

if __name__ == "__main__":
    main()
