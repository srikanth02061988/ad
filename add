import json
from pyspark.sql import SparkSession
from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch
from sentence_transformers import SentenceTransformer
from scipy.spatial.distance import cosine

# Initialize sentence transformer model for semantic similarity
sentence_model = SentenceTransformer('all-MiniLM-L6-v2')


# Path to your JSON file in DBFS
json_path = "/dbfs/mnt/path_to_your_json_file.json"

# Read the JSON file
with open(json_path, 'r') as file:
    data = json.load(file)

# Extract the input prompt and the LLM response
input_prompt = data['input']['input_prompt'][0]['content']
llm_response = data['output'][0]['llm_response'][0]['text']


# Load GPT-2 model and tokenizer
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')
model = GPT2LMHeadModel.from_pretrained('gpt2')

def calculate_perplexity(text):
    tokenize_input = tokenizer.encode(text, return_tensors="pt")
    loss = model(tokenize_input, labels=tokenize_input).loss
    return torch.exp(loss).item()

perplexity = calculate_perplexity(llm_response)


def calculate_similarity(text1, text2):
    embedding1 = sentence_model.encode(text1)
    embedding2 = sentence_model.encode(text2)
    return 1 - cosine(embedding1, embedding2)

similarity = calculate_similarity(input_prompt, llm_response)


def evaluate_confidence(perplexity, similarity):
    # Assign weights based on your preference
    weight_perplexity = 0.5  # Example weight
    weight_similarity = 0.5  # Example weight

    # Normalize perplexity (assuming lower is better)
    normalized_perplexity = 1 / perplexity

    # Calculate combined score
    confidence_score = (normalized_perplexity * weight_perplexity +
                        similarity * weight_similarity)
    return confidence_score

confidence_score = evaluate_confidence(perplexity, similarity)




# Extracting the input prompt and the LLM response
input_prompt = data['input'][0]['input_prompt'][0]['content']
# Parse the "11m_response" string into a JSON array and access the text
# Extracting "11m_response" as a string
llm_response_str = data['output'][0]['11m_response']
# print("llm_response_str", llm_response_str)
# Handling JSON parsing errors try:
    llm_response_json = json.loads(llm_response_str)     llm_response = llm_response_json[0]['choices'][0]['text'] except json.JSONDecodeError:
    llm_response = "Error: Invalid JSON format in '11m_response'"
    
print("Input Prompt:", input_prompt) print("LLM Response:", llm_response)




