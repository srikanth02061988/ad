import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class BlobStorageTriggerFunctionTest {

    @Mock
    private ExecutionContext context;
    @Mock
    private Logger logger;

    private BlobStorageTriggerFunction function;
    private final String storageAccountName = "teststorageaccount";
    private final String containerName = "testcontainer";
    private final String blobName = "test-blob.txt";
    private final String subFolder = "testsubfolder";
    private final String FullFilePath = subFolder + "/" + blobName;

    @BeforeEach
    void setUp() {
        function = new BlobStorageTriggerFunction();
        when(context.getLogger()).thenReturn(logger);
        
        // Mocking environment variables (or you could use a library like JUnit Pioneer to handle environment variables)
        System.setProperty("AZURE_STORAGE_CONTAINER", containerName);
        System.setProperty("Azure_STORAGE_SUBFOLDER", subFolder);
    }

    @Test
    void testBlobTriggerInvocation() {
        // Arrange
        String blobContent = "This is a test blob content.";
        String expectedLogMessage = "Constructed Blob URL: https://teststorageaccount.blob.core.windows.net/testcontainer/testsubfolder/test-blob.txt";

        // Act
        function.run(blobContent, blobName, context);

        // Assert
        verify(context).getLogger();
        verify(logger).info(contains(expectedLogMessage));
        assertDoesNotThrow(() -> function.run(blobContent, blobName, context));
    }
}
