from faker import Faker
import json

# Initialize Faker instance
fake = Faker()

# Function to generate synthetic data
def generate_synthetic_data():
    attribute = fake.random_element(elements=("input", "output", "modelLatency", "modelTokenCount", "jailbreakAttempt", "guardRailAttempt"))

    if attribute in ("input", "output"):
        value = {
            "endpoint": "complete",
            "modelName": "openai.turbo3.6",
            "prompt": fake.sentence(nb_words=6)
        }
    else:
        value = fake.random_int(min=1, max=100)

    if attribute in ("jailbreakAttempt", "guardRailAttempt"):
        metaInfo = {
            "modelName": "azure-openai.gpt-3-5-turbo",
            "prompt": fake.sentence(nb_words=6)
        }
    else:
        metaInfo = {
            "modelName": "azure-openai.gpt-3-5-turbo"
        }

    trace = {
        "traceId": fake.uuid4(),
        "attribute": attribute,
        "value": value,
        "metaInfo": metaInfo
    }

    data = {
        "traceTime": fake.date_time_this_year().isoformat() + "Z",
        "traceTimeEpochNS": fake.unix_time() * 10**9,
        "clientId": fake.uuid4(),
        "userId": fake.bothify(text="??-####-???"),
        "sessionId": fake.uuid4(),
        "appCode": "TXT",
        "specVersion": "1.0.0",
        "traceType": fake.random_element(elements=("trace", "metric")),
        "logMessage": "None" if fake.boolean() else fake.sentence(nb_words=5),
        "trace": trace
    }

    return data

# Generate synthetic data
synthetic_data = [generate_synthetic_data() for _ in range(100)]  # Generate 100 records

# Save to JSON file
with open('/mnt/data/synthetic_data.json', 'w') as f:
    json.dump(synthetic_data, f, indent=2)

print("Synthetic data has been generated and saved to 'synthetic_data.json'")
