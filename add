import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class BlobStorageTriggerFunctionTest {

    @Mock
    private CloudBlockBlob mockBlob;
    @Mock
    private BlobProperties mockBlobProperties;
    @Mock
    private ExecutionContext mockContext;
    @Mock
    private Logger mockLogger;
    @InjectMocks
    private BlobStorageTriggerFunction function;

    // Let's assume this is the path format your application uses
    private final String mockBlobPath = "container/blob-subfolder/blobfile.txt";

    @BeforeEach
    void setUp() {
        when(mockContext.getLogger()).thenReturn(mockLogger);
    }

    @Test
    public void shouldThrowExceptionForEmptyFilePath() {
        // The path is empty, should throw the "Empty Payload" exception
        Exception exception = assertThrows(Exception.class, () -> {
            function.run(mockBlob, "", mockContext);
        });
        assertEquals("Empty Payload", exception.getMessage());
    }

    @Test
    public void shouldLogBlobCreatedForValidPath() {
        // Run the function with a valid mock path
        function.run(mockBlob, mockBlobPath, mockContext);
        verify(mockLogger).info(contains("Blob Created: " + mockBlobPath));
    }

    @Test
    public void shouldSkipBlobIfNotModifiedWithinTimeframe() {
        when(mockBlob.getProperties()).thenReturn(mockBlobProperties);
        // Set last modified time to more than 2 minutes ago (2 minutes = 120,000 milliseconds)
        when(mockBlobProperties.getLastModified()).thenReturn(new Date(System.currentTimeMillis() - 121000));
        
        function.run(mockBlob, mockBlobPath, mockContext);
        
        verify(mockLogger).info(contains("Skipping blob: " + mockBlobPath));
    }

    @Test
    public void shouldLogIfLastModifiedDateNotAvailable() {
        when(mockBlob.getProperties()).thenReturn(mockBlobProperties);
        when(mockBlobProperties.getLastModified()).thenReturn(null);

        function.run(mockBlob, mockBlobPath, mockContext);

        verify(mockLogger).info(contains("Could not get lastModified for: " + mockBlobPath));
    }

    // ... Additional test cases for database interaction and SQL exceptions
}


import com.microsoft.azure.storage.blob.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class YourFunctionTest {

    @Mock
    private CloudBlobClient cloudBlobClient;

    @Mock
    private CloudBlockBlob cloudBlockBlob;

    @Mock
    private CloudStorageAccount storageAccount;

    @Mock
    private ExecutionContext context;

    @InjectMocks
    private YourFunction function; // Replace 'YourFunction' with your actual function class name

    @Test
    public void testRunFunction() throws Exception {
        // Arrange
        String fakeFilePath = "mock/blob/path";
        String storageConnectionString = "DefaultEndpointsProtocol=https;AccountName=YourAccountName;AccountKey=YourAccountKey;EndpointSuffix=core.windows.net";
        
        when(storageAccount.createCloudBlobClient()).thenReturn(cloudBlobClient);
        when(cloudBlobClient.getContainerReference(anyString())).thenReturn(new CloudBlobContainer(new URI("http://example.com")));
        when(cloudBlockBlob.getProperties()).thenReturn(new BlobProperties());
        when(cloudBlockBlob.getUri()).thenReturn(new URI("http://example.com"));

        // Act
        function.run(fakeFilePath, cloudBlockBlob, context);

        // Assert
        // Add assertions here to verify the behavior of the run method
        // For example:
        verify(cloudBlockBlob, times(1)).downloadAttributes();
        // You can also verify logging, but since it's a static method you might need to refactor your code to allow mocking it or use PowerMockito
    }
}
